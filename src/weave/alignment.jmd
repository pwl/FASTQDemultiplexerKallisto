```{julia;echo=false}
import Weave
Weave.set_chunk_defaults(Dict{Symbol, Any}(
    :echo => false
))
```


```julia
using Plots
using StatPlots
using DataFrames
plotly();
results = WEAVE_ARGS[:results]
indexnames = WEAVE_ARGS[:indexnames]
const doublealignment = :alignment2 in names(results)

@time alignment = by(results,:cellid) do r

    groupname=r[1,:groupname]
    totalreads=size(r,1)

    alignedreads=sum(x > -1 for x in r[:alignment])
    uniqueumis=length(Set(r[:umiid]))
    uniquerna=length(Set(filter(x->x[2]>-1,zip(r[:umiid],r[:alignment]))))
    percentagereads=(alignedreads)/(totalreads+1e-4)

    df=DataFrame(totalreads=totalreads,
                 groupname=groupname,
                 alignedreads=alignedreads,
                 uniqueumis=uniqueumis,
                 uniquerna=uniquerna,
                 percentagereads=percentagereads)

    if doublealignment
        alignedreads2=sum(x > -1 for x in r[:alignment2])

        uniquerna =length(Set(filter(
            x->(x[2]>-1 & x[3]==-1),zip(r[:umiid],r[:alignment],r[:alignment2]))))
        df[:uniquerna]=uniquerna

        uniquerna2=length(Set(filter(
            x->(x[3]>-1 & x[2]==-1),zip(r[:umiid],r[:alignment],r[:alignment2]))))

        percentagereads2=(alignedreads2)/(totalreads+1e-4)
        totalrna=uniquerna+uniquerna2
        percentagerna=((uniquerna)/(totalrna+1e-4))

        df=hcat(df,
                DataFrame(
                    alignedreads2=alignedreads2,
                    percentagereads2=percentagereads2,
                    totalrna=totalrna,
                    uniquerna2=uniquerna2,
                    percentagerna=percentagerna))
    end

    df

end

maxas = maximum(alignment[:alignedreads])
if doublealignment
    maxas = max(maxas,maximum(alignment[:alignedreads2]))
end
```

# Kallisto alignment statistics #

Found `j size(alignment,1)` cells.

```julia
begin
    plt = scatter(aspect_ratio = :equal,
                  title = "Reads per cell")

    scatter!(alignment,
             :totalreads,
             :alignedreads,
             group=:groupname,
             markersize=1,
             alpha=0.5,
             markerstrokewidth=0,
             hover=nothing)

    plot!(collect(0.9:maxas),
          collect(0.9:maxas),
          hover = false,
          linestyle = :dash,
          linecolor = :red,
          xaxis = ("total",:log10,(0.9,maxas)),
          yaxis= ("aligned",:log10,(0.9,maxas)),
          label = "")

    display(plt)
end
```


```julia
begin
    if doublealignment
        plt = scatter(xaxis = (:log10,(0.9,maxas)),
                      yaxis= (:log10,(0.9,maxas)),
                      aspect_ratio = :equal,
                      title = "Alignment vs different genome.")

        scatter!(alignment,
                 :alignedreads,
                 :alignedreads2,
                 xaxis=(indexnames[1],),
                 yaxis=(indexnames[2],),
                 group=:groupname,
                 markersize=1,
                 alpha=0.5,
                 markerstrokewidth=0,
                 hover=nothing)

        plot!(collect(0.9:maxas),
              collect(0.9:maxas),
              hover = false,
              linestyle = :dash,
              linecolor = :red,
              label = "")

        display(plt)

        maxuniquerna = max(maximum(alignment[:uniquerna]),
                           maximum(alignment[:uniquerna2]))
        rnapercell = sort(alignment[
            [:cellid,:groupname,:uniquerna,:uniquerna2,:percentagerna]],
                          cols=:percentagerna)

        plt = plot(rnapercell,:uniquerna,
                   label=indexnames[1],
                   title="Unique RNA per cell",
                   yaxis=(:log10,(0.9,maxuniquerna)))
        plot!(rnapercell,:uniquerna2,
              xlabel="Cell",
              ylabel="n. of unique RNA",
              label=indexnames[2])
        display(plt)

        plt = plot(title="Percentage of RNA unique to $(indexnames[1])",
                   ylims=(0,1.1))
        for df in groupby(rnapercell,:groupname)
            plt = plot!(sort(df,cols=:percentagerna,rev=true),
                        :percentagerna,
                        xlabel="Cell",
                        ylabel="RNA %",
                        label=df[1,:groupname])
        end
        display(plt)

        plt = histogram(rnapercell,:percentagerna,
                        title="Percentage of RNA unique to $(indexnames[1])",
                        group=:groupname,
                        bins=linspace(0,1,20),
                        xlims=(0,1),
                        xlabel="RNA %",
                        ylabel="n. of RNA")
        display(plt)

        plt = violin(rnapercell,
                     :groupname,:percentagerna,
                     title="Percentage of RNA unique to $(indexnames[1])",
                     xlabel="",
                     ylims=(0,1.1),
                     ylabel="RNA %")
        display(plt)

    end
end
```


```julia
begin
    alignmentsummary = by(alignment,:groupname) do f
        DataFrame(total=sum(f[:totalreads]),
                  aligned=sum(f[:alignedreads]))
    end

    writetable("/home/pawel/table.tsv",alignment[[:cellid, :groupname, :totalreads]])

    plt = bar(alignmentsummary,:groupname,:total,
              label="total",
              title="Reads per group")
    bar!(alignmentsummary,:groupname,:aligned,
         label="aligned",
         ylabel="n. of reads",
         xlabel="")
    display(plt)
end
```


```julia
begin
    plt = violin(alignment,:groupname,:totalreads,
                 side=:left,
                 label="total",
                 title="Reads per group: per cell distribution")
    violin!(alignment,:groupname,:alignedreads,
            label="aligned",
            yaxis=("n. of reads per cell",:log10),
            xaxis="",
            side=:right)
    display(plt)
end
```


```julia
begin
    plt = violin(alignment,:groupname,:percentagereads,
                 title="Relative alignment",
                 yaxis=("Alignment %",(0,1)),
                 xaxis="",
                 label="")
    display(plt)
end
```


```julia
begin
    plt = plot(title="Aligned reads per cell",
               ylims=(0,1))
    for df in groupby(alignment,:groupname)
        plt = plot!(sort(df,cols=:alignedreads,rev=true),
                    :alignedreads,
                    xaxis=("Cells",:log10,(0.9,size(alignment,1))),
                    yaxis=("Aligned reads",:log10,(0.9,maximum(alignment[:alignedreads]))),
                    label=df[1,:groupname])
    end
    display(plt)
end
```

```julia
begin

end
```
